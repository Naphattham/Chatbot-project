from flask import Flask, request, jsonify, render_template
from flask_cors import CORS
import json
import random
from sentence_transformers import SentenceTransformer, util
import logging

logging.basicConfig(level=logging.INFO)

app = Flask(__name__, static_url_path='/static')
CORS(app)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å JSON
with open("cars.json", "r", encoding="utf-8") as f:
    cars_data = json.load(f)

# ‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏° (‡πÉ‡∏ä‡πâ‡πÅ‡∏ö‡∏ö‡∏£‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á)
model = SentenceTransformer("sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2")

@app.route("/")
def index():
    return render_template("index.html")

@app.route("/chat", methods=["POST"])
def chat():
    try:
        data = request.get_json(force=True, silent=True)

        if not data or "message" not in data:
            logging.warning("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö message ‡πÉ‡∏ô request")
            return jsonify({"error": "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}), 400

        user_input = data.get("message", "").strip()

        if not user_input:
            logging.warning("‚ùå ‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏£‡∏±‡∏ö‡∏°‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Ñ‡πà‡∏≤‡∏ß‡πà‡∏≤‡∏á")
            return jsonify({"response": "‚ö†Ô∏è ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏õ‡πâ‡∏≠‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°"}), 400

        logging.info(f"üì© ‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {user_input}")

        # ‚úÖ ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
        relevant_car = search_car_data(user_input)

        # ‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏à‡∏≠
        response = generate_text_response(user_input, relevant_car)

        logging.info(f"üì§ ‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ: {response}")

        return jsonify({"response": response})

    except Exception as e:
        logging.error(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}", exc_info=True)
        return jsonify({"error": "‚ö†Ô∏è ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡πÄ‡∏ã‡∏¥‡∏£‡πå‡∏ü‡πÄ‡∏ß‡∏≠‡∏£‡πå"}), 500

def search_car_data(query):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
    query_embedding = model.encode(query, convert_to_tensor=True)
    car_texts = [car["‡∏£‡∏∏‡πà‡∏ô"] + " " + " ".join(car.get("aliases", [])) for car in cars_data]
    car_embeddings = model.encode(car_texts, convert_to_tensor=True)

    scores = util.pytorch_cos_sim(query_embedding, car_embeddings)[0]
    best_match_idx = scores.argmax().item()
    best_match_score = scores[best_match_idx].item()

    # ‚úÖ ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    if best_match_score < 0.6:
        return None

    return cars_data[best_match_idx]

def generate_text_response(user_input, car):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏ï‡∏≠‡∏ö‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏î‡∏∂‡∏á‡∏°‡∏≤"""
    if not car:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏£‡∏∏‡πà‡∏ô‡∏ô‡∏µ‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏•‡∏≠‡∏á‡∏™‡∏≠‡∏ö‡∏ñ‡∏≤‡∏°‡∏£‡∏∏‡πà‡∏ô‡∏≠‡∏∑‡πà‡∏ô"

    # ‚úÖ ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á
    model_name = car["‡∏£‡∏∏‡πà‡∏ô"]
    year = car.get("‡∏õ‡∏µ", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    acceleration = car["‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞"].get("‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á_0_100_‡∏Å‡∏°_‡∏ä‡∏°", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    top_speed = car["‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞"].get("‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    drive_system = car.get("‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô", "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏")
    price_info = "\n".join([f"- {k}: {v}" for k, v in car["‡∏£‡∏≤‡∏Ñ‡∏≤"].items()])

    # ‚úÖ ‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡πÉ‡∏´‡πâ‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏õ‡πá‡∏ô‡∏ò‡∏£‡∏£‡∏°‡∏ä‡∏≤‡∏ï‡∏¥
    response_templates = [
        f"üöó {model_name} ‡∏õ‡∏µ {year} ‡∏°‡∏µ‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞‡∏ó‡∏µ‡πà‡∏î‡∏µ ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÄ‡∏£‡πà‡∏á 0-100 ‡∏Å‡∏°./‡∏ä‡∏°. ‡πÑ‡∏î‡πâ‡πÉ‡∏ô {acceleration} ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î {top_speed} ‡∏Å‡∏°./‡∏ä‡∏°. ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô: {drive_system} üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤:\n{price_info}",
        f"‡∏£‡∏∏‡πà‡∏ô {model_name} ‡πÄ‡∏õ‡πá‡∏ô‡∏£‡∏ñ‡∏ó‡∏µ‡πà‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ô‡∏¥‡∏¢‡∏°‡πÉ‡∏ô‡∏õ‡∏µ {year} ‡∏°‡∏µ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á 0-100 ‡∏Å‡∏°./‡∏ä‡∏°. ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà {acceleration} ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏ó‡∏µ‡πà {top_speed} ‡∏Å‡∏°./‡∏ä‡∏°. ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡πÅ‡∏ö‡∏ö {drive_system} ‡πÇ‡∏î‡∏¢‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô‡∏ó‡∏µ‡πà:\n{price_info}",
        f"‡∏ñ‡πâ‡∏≤‡∏Ñ‡∏∏‡∏ì‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏°‡∏≠‡∏á‡∏´‡∏≤‡∏£‡∏ñ {model_name} ‡∏õ‡∏µ {year} ‡∏ô‡∏µ‡πà‡∏Ñ‡∏∑‡∏≠‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏ó‡∏µ‡πà‡∏ô‡πà‡∏≤‡∏™‡∏ô‡πÉ‡∏à:\n- ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á 0-100 ‡∏Å‡∏°./‡∏ä‡∏°.: {acceleration}\n- ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {top_speed}\n- ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô: {drive_system}\n- üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤:\n{price_info}",
    ]

    return random.choice(response_templates)

if __name__ == "__main__":
    app.run(debug=True, host="0.0.0.0", port=5000)
