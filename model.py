from sentence_transformers import SentenceTransformer, util
import json
import os

# üîπ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• Sentence Transformer
model_name = "sentence-transformers/paraphrase-multilingual-MiniLM-L12-v2"
model = SentenceTransformer(model_name, cache_folder="./models")

current_dir = os.path.dirname(__file__)  # ‡∏´‡∏≤‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏ü‡∏•‡πå model.py
cars_file_path = os.path.join(current_dir, "cars.json")  # ‡∏Å‡∏≥‡∏´‡∏ô‡∏î path

with open(cars_file_path, "r", encoding="utf-8") as f:
    docs = json.load(f)


if isinstance(docs, dict):
    docs = [docs]  

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÄ‡∏õ‡πá‡∏ô‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
def format_car_info(car):
    try:
        ‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞ = car.get("‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞", {})
        ‡∏£‡∏≤‡∏Ñ‡∏≤ = car.get("‡∏£‡∏≤‡∏Ñ‡∏≤", {})
        price_info = "\n".join([f"- {key}: {value}" for key, value in ‡∏£‡∏≤‡∏Ñ‡∏≤.items() if value])

        return f"üöó ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠: {car.get('‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}, ‡∏£‡∏∏‡πà‡∏ô: {car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}, ‡∏õ‡∏µ: {car.get('‡∏õ‡∏µ', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}, \
‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á 0-100 ‡∏Å‡∏°./‡∏ä‡∏°.: {‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞.get('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á_0_100_‡∏Å‡∏°_‡∏ä‡∏°', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}, \
‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î: {‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞.get('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}, \
üí∞ ‡∏£‡∏≤‡∏Ñ‡∏≤:\n{price_info if price_info else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}, \
‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô: {car.get('‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')}"
    except Exception as e:
        return f"‚ö†Ô∏è ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: {str(e)}"

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•
def retrieve_response(query):
    """‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡πÉ‡∏Å‡∏•‡πâ‡πÄ‡∏Ñ‡∏µ‡∏¢‡∏á‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏Å‡∏±‡∏ö Query"""
    query = query.lower().strip()

    # üîπ ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ñ‡∏≤‡∏°‡∏ñ‡∏∂‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡πÑ‡∏´‡∏ô
    brand_names = set(car["‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠"].lower() for car in docs if "‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠" in car)
    detected_brand = next((brand for brand in brand_names if brand in query), None)

    if detected_brand:
        return list_brand_models(detected_brand)

    for car in docs:
        model_name = car["‡∏£‡∏∏‡πà‡∏ô"].lower()
        if all(word in query for word in model_name.split()):
            return process_query(query, car)


    query_embedding = model.encode(query, convert_to_tensor=True)
    scores = util.pytorch_cos_sim(query_embedding, model.encode([format_car_info(car) for car in docs], convert_to_tensor=True))[0]
    
    best_match_idx = scores.argmax().item()
    best_match_score = scores[best_match_idx].item()

    similarity_threshold = 0.7  
    if best_match_score < similarity_threshold:
        return "‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ñ‡∏≤‡∏°‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏£‡∏ñ‡∏¢‡∏ô‡∏ï‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

    return process_query(query, docs[best_match_idx])

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°
def list_brand_models(brand):
    """‡∏Ñ‡∏∑‡∏ô‡∏Ñ‡πà‡∏≤‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏£‡∏∏‡πà‡∏ô‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Ç‡∏≠‡∏á‡πÅ‡∏ö‡∏£‡∏ô‡∏î‡πå‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡∏ñ‡∏≤‡∏°"""
    models = [car["‡∏£‡∏∏‡πà‡∏ô"] for car in docs if car.get("‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠", "").lower() == brand]
    
    if models:
        return f"üöó ‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand.capitalize()} ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {len(models)} ‡∏£‡∏∏‡πà‡∏ô ‡πÑ‡∏î‡πâ‡πÅ‡∏Å‡πà:\n- " + "\n- ".join(models)
    return f"‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Å‡∏±‡∏ö‡∏¢‡∏µ‡πà‡∏´‡πâ‡∏≠ {brand.capitalize()} ‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö"

# üîπ ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö
def process_query(query, car):
    """‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏±‡∏ö‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ ‡πÅ‡∏•‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ï‡∏≠‡∏ö‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á"""
    ‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞ = car.get("‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞", {})
    ‡∏£‡∏≤‡∏Ñ‡∏≤ = car.get("‡∏£‡∏≤‡∏Ñ‡∏≤", {})

    if "‡∏£‡∏≤‡∏Ñ‡∏≤" in query:
        price_info = "\n".join([f"- {key}: {value}" for key, value in ‡∏£‡∏≤‡∏Ñ‡∏≤.items() if value])
        return f"üí∞ ‡∏£‡∏∏‡πà‡∏ô {car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏î‡∏±‡∏á‡∏ô‡∏µ‡πâ:\n{price_info if price_info else '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•'}"

    if "0-100" in query or "‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á" in query:
        return f"üöÄ ‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á 0-100 ‡∏Å‡∏°./‡∏ä‡∏°. ‡∏Ç‡∏≠‡∏á {car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏Ñ‡∏∑‡∏≠ {‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞.get('‡∏≠‡∏±‡∏ï‡∏£‡∏≤‡πÄ‡∏£‡πà‡∏á_0_100_‡∏Å‡∏°_‡∏ä‡∏°', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}"

    if "‡∏õ‡∏µ" in query or "‡∏ú‡∏•‡∏¥‡∏ï‡∏õ‡∏µ" in query:
        return f"{car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏ú‡∏•‡∏¥‡∏ï‡πÉ‡∏ô‡∏õ‡∏µ {car.get('‡∏õ‡∏µ', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}"

    if "‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î" in query:
        return f"üöÄ ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î‡∏Ç‡∏≠‡∏á {car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏Ñ‡∏∑‡∏≠ {‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏ô‡∏∞.get('‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏£‡πá‡∏ß‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}"

    if "‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô" in query:
        return f"üõû ‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡∏Ç‡∏≠‡∏á {car.get('‡∏£‡∏∏‡πà‡∏ô', '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏')} ‡∏Ñ‡∏∑‡∏≠ {car.get('‡∏£‡∏∞‡∏ö‡∏ö‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô', '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•')}"
    
    return format_car_info(car)
